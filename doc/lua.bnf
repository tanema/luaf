;; Right recursive bnf for lua which is easier to implement than left recur
block         ::= statlist
statlist      ::= { stat [';'] }
stat          ::= ';' | ifstat | whilestat | DO block END | forstat | repeatstat
                  | funcstat | localstat | label | retstat | 'break' | 'goto' NAME
                  | funccallstat | assignment 
ifstat        ::= IF exp THEN block {ELSEIF exp THEN block} [ELSE block] END
whilestat     ::= WHILE exp DO block END
forstat       ::= FOR (fornum | forlist) END
fornum        ::= NAME = exp,exp[,exp] DO
forlist       ::= NAME {,NAME} IN explist DO
repeatstat    ::= REPEAT block UNTIL exp
funcstat      ::= FUNCTION funcname body
funcname      ::= NAME {fieldsel} [':' NAME]
body          ::=  '(' parlist ')' block END
fieldsel      ::= ['.' | ':'] NAME
parlist       ::= [ {NAME ','} (NAME | '...') ]
localstat     ::= LOCAL NAME attrib { ',' NAME attrib } ['=' explist]
attrib        ::= ['<' ('const' | 'close') '>']
label         ::= '::' NAME '::'
retstat       ::= RETURN [explist] [';']
funccallstat  ::= suffixedexp funcargs
assignment    ::= suffixedexp { ',' suffixedexp } '=' explist
explist       ::= expr { ',' expr }
expr          ::= (simpleexp | unop expr) { binop expr }
simpleexp     ::= FLOAT | INTEGER | STRING | NIL | TRUE | FALSE | ... 
                  | constructor | FUNCTION body | suffixedexp
sep           ::= ',' | ';' 
constructor   ::= '{' [ field { sep field } [sep] ] '}' 
field         ::= NAME = exp | '['exp']' = exp | exp
suffixedexp   ::= primaryexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
funcargs      ::= '(' [ explist ] ')' | constructor | STRING
primaryexp    ::= NAME | '(' expr ')'
